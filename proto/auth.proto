syntax="proto3";

package auth;

message LoginRequest {
    string username = 1;
    string password = 2;
}
  
message LoginResponse { 
    string access_token = 1;
    string refresh_token = 2;
}

message AccessTokenRequest {
    string refresh_token = 1;
}

message AccessTokenResponse {
    string access_token = 1;
    string refresh_token = 2;
}

// For invalidating refresh tokens
message LogoutRequest {
    string refresh_token = 2;
}

message LogoutResponse {
    bool success = 1;
}

message RegisterRequest {
    string username = 1; // moodle id
    // Password should be generated by the server
    string first_name = 2;
    string last_name = 3;
    string middle_name = 4;
    string email = 5;
    string phone = 6;
    string mobile = 7;
}

message RegisterResponse {
    bool success = 1;
}


message CheckUsernameRequest {
    string username = 1;
}

message CheckUsernameResponse {
    bool available = 1;
}


service AuthService {
    // Unary RPC
    rpc Register(RegisterRequest) returns (RegisterResponse) {};

    // Client streaming RPC
    // Client can register multiple users at once
    rpc RegisterStream(stream RegisterRequest) returns (RegisterResponse) {};

    // Here client is sending a stream of messages to server
    // Because client can try bunch of Username combinations for availability
    // But right now it's not what we need. Just for future help
    rpc UserNames(stream CheckUsernameRequest) returns (CheckUsernameResponse) {};

    rpc Login(LoginRequest) returns (LoginResponse) {};
    rpc AccessToken(AccessTokenRequest) returns (AccessTokenResponse) {};
    rpc Logout(LogoutRequest) returns (LogoutResponse) {};
}